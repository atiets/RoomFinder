// controllers/threadController.js
const Thread = require('../models/Thread');
const Comment = require('../models/Comment');
const User = require('../models/User'); 
const { validationResult } = require('express-validator');
const mongoose = require('mongoose');

/**
 * T·∫°o thread m·ªõi
 * @route POST /v1/forum/threads
 * @access Private
 */
exports.createThread = async (req, res) => {
  try {
    // Ki·ªÉm tra l·ªói validation
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ success: false, errors: errors.array() });
    }

    const { title, content, tags } = req.body;
    
    // Ki·ªÉm tra th√¥ng tin user
    if (!req.user) {
      return res.status(401).json({
        success: false,
        message: 'Th√¥ng tin ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá'
      });
    }
    
    // Ki·ªÉm tra username
    if (!req.user.username) {
      return res.status(400).json({
        success: false,
        message: 'Username kh√¥ng t·ªìn t·∫°i. Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n.'
      });
    }
    
    // T·∫°o thread m·ªõi v·ªõi username v√† avatar
    const newThread = new Thread({
      title,
      content,
      tags: tags || [],
      author: req.user.id,
      username: req.user.username, // L∆∞u tr·ª±c ti·∫øp username
      avatar: req.user.profile?.picture || null, // L∆∞u tr·ª±c ti·∫øp avatar URL
      status: 'pending' // Ho·∫∑c 'approved' n·∫øu kh√¥ng c·∫ßn duy·ªát
    });
    
    const savedThread = await newThread.save();
    
    // Tr·∫£ v·ªÅ thread ƒë√£ ƒë∆∞·ª£c l∆∞u
    res.status(201).json({
      success: true,
      message: 'T·∫°o b√†i vi·∫øt th√†nh c√¥ng! ƒêang ch·ªù ph√™ duy·ªát.',
      data: {
        id: savedThread._id,
        title: savedThread.title,
        content: savedThread.content,
        username: savedThread.username,
        avatar: savedThread.avatar,
        tags: savedThread.tags,
        status: savedThread.status,
        created_at: savedThread.created_at
      }
    });
  } catch (err) {
    console.error('Create thread error:', err.message);
    
    // Handle c√°c l·ªói c·ª• th·ªÉ
    if (err.name === 'ValidationError') {
      const errors = Object.values(err.errors).map(e => e.message);
      return res.status(400).json({
        success: false,
        message: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá',
        errors
      });
    }
    
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi t·∫°o b√†i vi·∫øt'
    });
  }
};

/**
 * L·∫•y t·∫•t c·∫£ threads v·ªõi ph√¢n trang
 * @route GET /v1/forum/threads
 * @access Public
 */
exports.getAllThreads = async (req, res) => {
  try {
    // L·∫•y c√°c tham s·ªë t·ª´ query string
    const { page = 1, limit = 10 } = req.query;
    
    // T·∫°o query object
    const query = { status: 'approved' };
    
    // T√≠nh to√°n skip cho ph√¢n trang
    const skip = (parseInt(page) - 1) * parseInt(limit);
    
    // Th·ª±c hi·ªán query ƒë·ªÉ l·∫•y threads v·ªõi author field
    let threads = await Thread.find(query)
      .select('title content username avatar tags likes dislikes viewCount created_at status author')
      .sort({ created_at: -1 })
      .skip(skip)
      .limit(parseInt(limit))
      .lean();
    
    // ƒê·∫øm t·ªïng s·ªë threads th·ªèa m√£n ƒëi·ªÅu ki·ªán
    const total = await Thread.countDocuments(query);
    
    // L·∫•y threadIds ƒë·ªÉ ƒë·∫øm comments
    const threadIds = threads.map(thread => thread._id);
    
    // ƒê·∫øm s·ªë comments cho t·∫•t c·∫£ threads
    const commentCounts = await Comment.aggregate([
      { $match: { thread: { $in: threadIds } } },
      { $group: { _id: '$thread', count: { $sum: 1 } } }
    ]);
    
    // T·∫°o map t·ª´ k·∫øt qu·∫£ aggregate
    const commentCountMap = commentCounts.reduce((map, item) => {
      map[item._id.toString()] = item.count;
      return map;
    }, {});
    
    // Format threads v·ªõi like/dislike counts v√† author info
    threads = threads.map(thread => ({
      _id: thread._id,
      title: thread.title,
      content: thread.content,
      username: thread.username,
      avatar: thread.avatar,
      tags: thread.tags,
      likesCount: thread.likes.length,
      dislikesCount: thread.dislikes.length,
      commentCount: commentCountMap[thread._id.toString()] || 0,
      viewCount: thread.viewCount,
      created_at: thread.created_at,
      status: thread.status,
      author: thread.author // Include author ID for ownership checking
    }));
    
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi th√¥ng tin ph√¢n trang
    res.json({
      success: true,
      data: threads,
      pagination: {
        total,
        page: parseInt(page),
        limit: parseInt(limit),
        pages: Math.ceil(total / parseInt(limit))
      }
    });
  } catch (err) {
    console.error('Get threads error:', err);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y danh s√°ch threads'
    });
  }
};

/**
 * C·∫≠p nh·∫≠t thread
 * @route PUT /v1/forum/threads/:id
 * @access Private
 */
exports.updateThread = async (req, res) => {
  try {
    const { id } = req.params;
    const { title, content, tags } = req.body;
    const userId = req.user.id;
    const username = req.user.username;

    console.log('‚úèÔ∏è Update thread request:', { id, userId, username });

    // Validation
    if (!title || title.trim().length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
      });
    }

    if (!content || content.trim().length === 0) {
      return res.status(400).json({
        success: false,
        message: 'N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
      });
    }

    if (title.trim().length > 200) {
      return res.status(400).json({
        success: false,
        message: 'Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 200 k√Ω t·ª±'
      });
    }

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: 'ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá'
      });
    }

    const thread = await Thread.findById(id);
    if (!thread) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
      });
    }

    // Ki·ªÉm tra quy·ªÅn s·ª≠a: ch·ªâ cho ph√©p ch·ªß thread
    const canEdit = (
      thread.username === username || 
      thread.author.toString() === userId
    );

    if (!canEdit) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a b√†i vi·∫øt n√†y'
      });
    }

    // Ki·ªÉm tra th·ªùi gian: ch·ªâ cho ph√©p s·ª≠a trong 24h
    const createdAt = new Date(thread.created_at);
    const now = new Date();
    const hoursDiff = (now - createdAt) / (1000 * 60 * 60);

    if (hoursDiff > 24) {
      return res.status(403).json({
        success: false,
        message: 'Ch·ªâ c√≥ th·ªÉ s·ª≠a b√†i vi·∫øt trong v√≤ng 24 gi·ªù sau khi ƒëƒÉng'
      });
    }

    console.log('‚úÖ User authorized to edit thread');

    // C·∫≠p nh·∫≠t thread
    const updatedThread = await Thread.findByIdAndUpdate(
      id,
      {
        title: title.trim(),
        content: content.trim(),
        tags: tags || thread.tags,
        updated_at: new Date()
      },
      { new: true }
    ).select('title content username avatar tags likes dislikes viewCount created_at updated_at author');

    console.log('‚úÖ Thread updated successfully');

    res.json({
      success: true,
      message: 'ƒê√£ c·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng',
      data: {
        ...updatedThread.toObject(),
        likesCount: updatedThread.likes.length,
        dislikesCount: updatedThread.dislikes.length,
        edited: true
      }
    });
  } catch (err) {
    console.error('‚ùå Update thread error:', err);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi c·∫≠p nh·∫≠t b√†i vi·∫øt'
    });
  }
};

/**
 * X√≥a thread
 * @route DELETE /v1/forum/threads/:id
 * @access Private
 */
exports.deleteThread = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;
    const username = req.user.username;

    console.log('üóëÔ∏è Delete thread request:', { id, userId, username });

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: 'ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá'
      });
    }

    const thread = await Thread.findById(id);
    if (!thread) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
      });
    }

    // Ki·ªÉm tra quy·ªÅn x√≥a: ch·ªâ cho ph√©p ch·ªß thread
    const canDelete = (
      thread.username === username || 
      thread.author.toString() === userId
    );

    if (!canDelete) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√†i vi·∫øt n√†y'
      });
    }

    console.log('‚úÖ User authorized to delete thread');

    // X√≥a t·∫•t c·∫£ comments c·ªßa thread tr∆∞·ªõc
    await Comment.deleteMany({ thread: id });
    console.log('‚úÖ Deleted all comments for thread');

    // X√≥a thread
    await Thread.findByIdAndDelete(id);
    console.log('‚úÖ Thread deleted successfully');

    res.json({
      success: true,
      message: 'ƒê√£ x√≥a b√†i vi·∫øt th√†nh c√¥ng'
    });
  } catch (err) {
    console.error('‚ùå Delete thread error:', err);
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi x√≥a b√†i vi·∫øt'
    });
  }
};

/**
 * Like m·ªôt thread
 * @route POST /v1/forum/threads/:id/like
 * @access Private
 */
exports.likeThread = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    // T√¨m thread
    const thread = await Thread.findById(id);
    if (!thread) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
      });
    }

    // Check thread status
    if (thread.status !== 'approved') {
      return res.status(403).json({
        success: false,
        message: 'B√†i vi·∫øt ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát'
      });
    }

    const userIdObj = new mongoose.Types.ObjectId(userId);
    
    // Ki·ªÉm tra user ƒë√£ like ch∆∞a
    const hasLiked = thread.likes.includes(userIdObj);
    const hasDisliked = thread.dislikes.includes(userIdObj);

    if (hasLiked) {
      // N·∫øu ƒë√£ like th√¨ remove like (toggle off)
      thread.likes.pull(userIdObj);
    } else {
      // N·∫øu ch∆∞a like
      if (hasDisliked) {
        // Remove dislike n·∫øu c√≥
        thread.dislikes.pull(userIdObj);
      }
      // Add like
      thread.likes.push(userIdObj);
    }

    await thread.save();

    res.json({
      success: true,
      message: hasLiked ? 'ƒê√£ b·ªè th√≠ch' : 'ƒê√£ th√≠ch b√†i vi·∫øt',
      data: {
        liked: !hasLiked,
        disliked: false,
        likesCount: thread.likes.length,
        dislikesCount: thread.dislikes.length
      }
    });
  } catch (err) {
    console.error('Like thread error:', err);
    
    if (err.name === 'CastError') {
      return res.status(400).json({
        success: false,
        message: 'ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá'
      });
    }
    
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi th√≠ch b√†i vi·∫øt'
    });
  }
};

/**
 * Dislike m·ªôt thread
 * @route POST /v1/forum/threads/:id/dislike
 * @access Private
 */
exports.dislikeThread = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    // T√¨m thread
    const thread = await Thread.findById(id);
    if (!thread) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
      });
    }

    // Check thread status
    if (thread.status !== 'approved') {
      return res.status(403).json({
        success: false,
        message: 'B√†i vi·∫øt ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát'
      });
    }

    const userIdObj = new mongoose.Types.ObjectId(userId);
    
    // Ki·ªÉm tra user ƒë√£ dislike ch∆∞a
    const hasLiked = thread.likes.includes(userIdObj);
    const hasDisliked = thread.dislikes.includes(userIdObj);

    if (hasDisliked) {
      // N·∫øu ƒë√£ dislike th√¨ remove dislike (toggle off)
      thread.dislikes.pull(userIdObj);
    } else {
      // N·∫øu ch∆∞a dislike
      if (hasLiked) {
        // Remove like n·∫øu c√≥
        thread.likes.pull(userIdObj);
      }
      // Add dislike
      thread.dislikes.push(userIdObj);
    }

    await thread.save();

    res.json({
      success: true,
      message: hasDisliked ? 'ƒê√£ b·ªè kh√¥ng th√≠ch' : 'ƒê√£ kh√¥ng th√≠ch b√†i vi·∫øt',
      data: {
        liked: false,
        disliked: !hasDisliked,
        likesCount: thread.likes.length,
        dislikesCount: thread.dislikes.length
      }
    });
  } catch (err) {
    console.error('Dislike thread error:', err);
    
    if (err.name === 'CastError') {
      return res.status(400).json({
        success: false,
        message: 'ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá'
      });
    }
    
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi kh√¥ng th√≠ch b√†i vi·∫øt'
    });
  }
};

/**
 * L·∫•y tr·∫°ng th√°i like/dislike c·ªßa user cho m·ªôt thread
 * @route GET /v1/forum/threads/:id/like-status
 * @access Private
 */
exports.getThreadLikeStatus = async (req, res) => {
  try {
    const { id } = req.params;
    const userId = req.user.id;

    // T√¨m thread
    const thread = await Thread.findById(id).select('likes dislikes');
    if (!thread) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
      });
    }

    const userIdObj = new mongoose.Types.ObjectId(userId);
    const hasLiked = thread.likes.includes(userIdObj);
    const hasDisliked = thread.dislikes.includes(userIdObj);

    res.json({
      success: true,
      data: {
        liked: hasLiked,
        disliked: hasDisliked,
        likesCount: thread.likes.length,
        dislikesCount: thread.dislikes.length
      }
    });
  } catch (err) {
    console.error('Get like status error:', err);
    
    if (err.name === 'CastError') {
      return res.status(400).json({
        success: false,
        message: 'ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá'
      });
    }
    
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y tr·∫°ng th√°i th√≠ch'
    });
  }
};

/**
 * L·∫•y thread theo ID v·ªõi like/dislike counts
 * @route GET /v1/forum/threads/:id
 * @access Public
 */
exports.getThreadById = async (req, res) => {
  try {
    const { id } = req.params;
    
    // T√¨m thread v√† tƒÉng view count
    const thread = await Thread.findByIdAndUpdate(
      id,
      { $inc: { viewCount: 1 } },
      { new: true }
    )
    .select('title content username avatar tags likes dislikes viewCount created_at status')
    .lean();
    
    if (!thread) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt'
      });
    }
    
    // Check if thread is approved
    if (thread.status !== 'approved') {
      return res.status(403).json({
        success: false,
        message: 'B√†i vi·∫øt ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát'
      });
    }
    
    // Count comments
    const commentCount = await Comment.countDocuments({ thread: id });
    
    // Format response
    const formattedThread = {
      _id: thread._id,
      title: thread.title,
      content: thread.content,
      username: thread.username,
      avatar: thread.avatar,
      tags: thread.tags,
      likesCount: thread.likes.length,
      dislikesCount: thread.dislikes.length,
      commentCount,
      viewCount: thread.viewCount,
      created_at: thread.created_at,
      status: thread.status
    };
    
    res.json({
      success: true,
      data: formattedThread
    });
  } catch (err) {
    console.error('Get thread by ID error:', err);
    
    if (err.name === 'CastError') {
      return res.status(400).json({
        success: false,
        message: 'ID b√†i vi·∫øt kh√¥ng h·ª£p l·ªá'
      });
    }
    
    res.status(500).json({
      success: false,
      message: 'L·ªói server khi l·∫•y b√†i vi·∫øt'
    });
  }
};