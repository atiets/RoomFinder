const { autoReplyQueue } = require('./bullmq');
const rules = require('../rules');
const { getReplyFromAI } = require('../aiProxy');
const { getOnlineAdmins } = require("../filterOnlineAdmins");
const mongoose = require('mongoose');
const Conversation = require('../../models/Conversation');
const Message = require('../../models/Message');

/**
 * H√†m x·ª≠ l√Ω m·ªói tin nh·∫Øn ƒë·∫øn t·ª´ client
 * @param {import('socket.io').Server} io      - socket‚Äëserver to√†n c·ª•c
 * @param {string} socketId                    - id phi√™n client ƒëang chat
 * @param {string} incomingMessage             - n·ªôi dung ng∆∞·ªùi d√πng g·ª≠i
 */
botId = process.env.BOT_ID || null; // id bot, n·∫øu c√≥

async function handleIncomingMessage(io, socketId, { sender, content }, onlineUsers) {
    try {
        // 1. T√¨m ho·∫∑c t·∫°o conversation user + bot (ho·∫∑c user ƒë∆°n gi·∫£n)
        const participantIds = [mongoose.Types.ObjectId(sender)];
        if (botId) participantIds.push(mongoose.Types.ObjectId(botId));
        participantIds.sort();

        let conversation = await Conversation.findOne({
            participants: { $all: participantIds, $size: participantIds.length }
        });

        if (!conversation) {
            conversation = await Conversation.create({ participants: participantIds });
        }

        // 2. Th·ª≠ tr·∫£ l·ªùi theo rule
        let reply = matchRule(content);

        // 3. N·∫øu kh√¥ng c√≥ rule, g·ªçi AI tr·∫£ l·ªùi
        if (!reply) {
            reply = await getReplyFromAI(content);
        }

        // 4. Ki·ªÉm tra xem AI c√≥ tr·∫£ l·ªùi ƒë∆∞·ª£c kh√¥ng
        const adminReplyMarker = "Hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y, vui l√≤ng ƒë·ª£i admin ph·∫£n h·ªìi.";
        const needsAdmin = !reply || reply.toLowerCase().includes(adminReplyMarker.toLowerCase());

        // 5. L∆∞u tin nh·∫Øn user g·ª≠i
        const userMessage = await Message.create({
            conversationId: conversation._id,
            sender,
            receiver: null, // ch∆∞a x√°c ƒë·ªãnh admin
            content,
            timestamp: new Date(),
        });

        // 6. N·∫øu c·∫ßn admin x·ª≠ l√Ω (AI kh√¥ng tr·∫£ l·ªùi ƒë∆∞·ª£c)
        if (needsAdmin) {
            if (!conversation.claimedByAdmin) {
                const onlineAdminIds = getOnlineAdmins(onlineUsers);
                // C·∫≠p nh·∫≠t tin nh·∫Øn cu·ªëi c√πng
                conversation.lastMessage = userMessage;

                // D√πng `populate` ƒë·ªÉ l·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin nh∆∞ m·∫´u mong mu·ªën
                const populatedConversation = await Conversation.findById(conversation._id)
                    .populate({
                        path: "participants",
                        select: "_id username email profile.picture profile.isOnline",
                        options: { strictPopulate: false }
                    })
                    .populate({
                        path: "lastMessage",
                        options: { strictPopulate: false }
                    });
                for (const adminId of onlineAdminIds) {
                    const adminSocketId = onlineUsers[adminId];
                    if (adminSocketId) {
                        console.log(`üîî send data khi g·ª≠i tin nh·∫Øn ${populatedConversation}`);
                        io.to(adminSocketId).emit("adminNotifyMessage", populatedConversation);
                    } else {
                        console.log(`‚ùå No socket found for admin ${adminId}`);
                    }
                }

            } else {
                const adminId = conversation.claimedByAdmin.toString();
                const adminSocketId = onlineUsers[adminId];
                if (adminSocketId) {
                    io.to(adminSocketId).emit("receiveMessage", userMessage);
                }
            }
        }
        // 7. N·∫øu AI tr·∫£ l·ªùi ƒë∆∞·ª£c, l∆∞u tin tr·∫£ l·ªùi v√†o DB
        const replySenderId = botId || null; // bot g·ª≠i, ho·∫∑c null admin ·∫£o
        const replyMessage = await Message.create({
            conversationId: conversation._id,
            sender: replySenderId,
            receiver: sender,
            content: reply,
            timestamp: new Date(),
        });

        // 8. C·∫≠p nh·∫≠t conversation lastMessage v√† tr·∫°ng th√°i ƒë·ªçc
        conversation.lastMessage = replyMessage._id;
        conversation.updatedAt = new Date();
        conversation.readBy = [sender];
        await conversation.save();

        // 9. ƒê∆∞a reply v√†o queue g·ª≠i message
        await autoReplyQueue.add(
            'sendReply',
            { socketId, reply },
            { attempts: 3, backoff: 2000 }
        );

        // 10. G·ª≠i realtime cho user
        io.to(socketId).emit("receiveMessage", replyMessage);

    } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω tin nh·∫Øn:", error);
    }
}

/* ----------------- Helpers ----------------- */
function matchRule(message) {
    for (const rule of rules) {
        if (rule.pattern.test(message)) return rule.response;
    }
    return null;
}

module.exports = { handleIncomingMessage };